
running 1 test
test parser::tests::parse_variable_statement ... FAILED

failures:

---- parser::tests::parse_variable_statement stdout ----
thread 'parser::tests::parse_variable_statement' panicked at src/parser.rs:601:9:
assertion `left == right` failed
  left: [Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "x" }), init: Some(Literal(NumberLiteral(NumberLiteral { value: 5.0 }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "y" }), init: Some(Literal(StringLiteral(StringLiteral { value: "hello" }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "z" }), init: Some(Literal(BooleanLiteral(BooleanLiteral { value: false }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: None }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "d" }), init: Some(Literal(NullLiteral)) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "myRegex" }), init: Some(Literal(RegExpLiteral(RegExpLiteral { regex: RegExp { pattern: "[hello](.*)world[0-9]$", flags: RegularExpressionFlags { value: 14 } } }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "myRegex2" }), init: Some(Literal(RegExpLiteral(RegExpLiteral { regex: RegExp { pattern: "=start[a-z]\\/with(.*)equals", flags: RegularExpressionFlags { value: 160 } } }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "b" }), init: None }, VariableDeclarator { id: Identifier(Identifier { name: "c" }), init: Some(Literal(NumberLiteral(NumberLiteral { value: 4.0 }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "hello" }), init: Some(Literal(StringLiteral(StringLiteral { value: "world" }))) }, VariableDeclarator { id: Identifier(Identifier { name: "bool" }), init: Some(Literal(BooleanLiteral(BooleanLiteral { value: false }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "sum" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "product" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 8.0 })), operator: Multiply })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "precedence" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 8.0 })), operator: Multiply }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "precedence2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 8.0 })), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lotsOfOperations" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), operator: Divide }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: Plus }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.5 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Multiply }), operator: Minus }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 67.45 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Divide }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "exp" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Exponentiation }), operator: Exponentiation }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: Multiply }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "exp2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Exponentiation }), operator: Multiply })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "remainder" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Remainder }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "remainder2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Remainder }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "leftShift" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Multiply }), operator: LeftShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "leftShift2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: LeftShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "rightShift" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Multiply }), operator: RightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "rightShift2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: RightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "unsignedRightShift" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Multiply }), operator: UnsignedRightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "unsignedRightShift2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: UnsignedRightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThan" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: LessThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThan2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: LessThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThanEqual" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: LessThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThanEqual2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: LessThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThan" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: GreaterThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThan2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: GreaterThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThanEqual" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: GreaterThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThanEqual2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: GreaterThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "inOperator" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(StringLiteral(StringLiteral { value: "property" })), right: Identifier(Identifier { name: "y" }), operator: In })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "instanceofOperator" }), init: Some(BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "x" }), right: Identifier(Identifier { name: "y" }), operator: Instanceof })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "doubleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "x" }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: DoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "doubleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(StringLiteral(StringLiteral { value: "hello" })), right: Literal(BooleanLiteral(BooleanLiteral { value: false })), operator: DoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notDoubleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Identifier(Identifier { name: "x" }), operator: NotDoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notDoubleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: false })), right: Literal(StringLiteral(StringLiteral { value: "hello" })), operator: NotDoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "tripleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "x" }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: TripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "tripleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(StringLiteral(StringLiteral { value: "hello" })), right: Literal(BooleanLiteral(BooleanLiteral { value: false })), operator: TripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notTripleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Identifier(Identifier { name: "x" }), operator: NotTripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notTripleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: false })), right: Literal(StringLiteral(StringLiteral { value: "hello" })), operator: NotTripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "bitwise" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 23.0 })), operator: BitwiseAnd }), operator: BitwiseXor }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 14.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), operator: BitwiseOr })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "logical" }), init: Some(LogicalExpression(LogicalExpression { left: LogicalExpression(LogicalExpression { left: BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: true })), right: Literal(BooleanLiteral(BooleanLiteral { value: false })), operator: TripleEqual }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: GreaterThan }), operator: And }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Or })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "logical2" }), init: Some(LogicalExpression(LogicalExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: true })), right: LogicalExpression(LogicalExpression { left: BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: false })), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: GreaterThan }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: TripleEqual }), operator: And }), operator: Or })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "logical3" }), init: Some(LogicalExpression(LogicalExpression { left: Identifier(Identifier { name: "thing" }), right: Literal(StringLiteral(StringLiteral { value: "fallback" })), operator: NullishCoalescing })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: GreaterThan }), operator: Assign })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Divide }), operator: Multiply })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: Multiply }), operator: Plus }), operator: Minus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: Identifier(Identifier { name: "d" }), operator: Remainder }), operator: Remainder })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), operator: UnsignedRightShift }), operator: RightShift }), operator: LeftShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), operator: BitwiseXor }), operator: BitwiseAnd }), operator: BitwiseOr })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "e" }), right: Literal(StringLiteral(StringLiteral { value: "hello" })), operator: NullishCoalescing }), operator: LogicalAnd }), operator: LogicalOr }), operator: Exponentiation })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Minus, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Plus, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: LogicalNot, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: BitwiseNot, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Typeof, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Void, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Delete, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "b" }), right: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "c" }), operator: Minus, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "d" }), operator: BitwiseNot, prefix: true }), operator: Multiply }), operator: Plus }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "e" }), operator: Typeof, prefix: true }), operator: TripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: LogicalNot, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "c" }), operator: Plus, prefix: true }), operator: Divide }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "d" }), operator: Minus, prefix: true }), operator: Minus }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "e" }), operator: Void, prefix: true }), operator: GreaterThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(LogicalExpression(LogicalExpression { left: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Plus, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "c" }), operator: Minus, prefix: true }), operator: GreaterThan }), right: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "d" }), operator: BitwiseNot, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "e" }), operator: LogicalNot, prefix: true }), operator: LessThanEqual }), operator: And })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "b" }), operator: Increment, prefix: true }), right: BinaryExpression(BinaryExpression { left: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "c" }), operator: Decrement, prefix: true }), right: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "d" }), operator: Increment, prefix: true }), operator: Multiply }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "b" }), operator: Decrement, prefix: false }), right: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "c" }), operator: Increment, prefix: false }), operator: Divide }), right: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "d" }), operator: Decrement, prefix: false }), operator: Minus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Typeof, prefix: true })) }] }))]
 right: [Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "x" }), init: Some(Literal(NumberLiteral(NumberLiteral { value: 5.0 }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "y" }), init: Some(Literal(StringLiteral(StringLiteral { value: "hello" }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "z" }), init: Some(Literal(BooleanLiteral(BooleanLiteral { value: false }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: None }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "d" }), init: Some(Literal(NullLiteral)) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "myRegex" }), init: Some(Literal(RegExpLiteral(RegExpLiteral { regex: RegExp { pattern: "[hello](.*)world[0-9]$", flags: RegularExpressionFlags { value: 14 } } }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "myRegex2" }), init: Some(Literal(RegExpLiteral(RegExpLiteral { regex: RegExp { pattern: "=start[a-z]\\/with(.*)equals", flags: RegularExpressionFlags { value: 160 } } }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "b" }), init: None }, VariableDeclarator { id: Identifier(Identifier { name: "c" }), init: Some(Literal(NumberLiteral(NumberLiteral { value: 4.0 }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "hello" }), init: Some(Literal(StringLiteral(StringLiteral { value: "world" }))) }, VariableDeclarator { id: Identifier(Identifier { name: "bool" }), init: Some(Literal(BooleanLiteral(BooleanLiteral { value: false }))) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "sum" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "product" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 8.0 })), operator: Multiply })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "precedence" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 8.0 })), operator: Multiply }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "precedence2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 8.0 })), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lotsOfOperations" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), operator: Divide }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: Plus }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.5 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Multiply }), operator: Minus }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 67.45 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Divide }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "exp" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Exponentiation }), operator: Exponentiation }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: Multiply }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "exp2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Exponentiation }), operator: Multiply })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "remainder" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Remainder }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "remainder2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Remainder }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "leftShift" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Multiply }), operator: LeftShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "leftShift2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: LeftShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "rightShift" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Multiply }), operator: RightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "rightShift2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: RightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "unsignedRightShift" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Multiply }), operator: UnsignedRightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "unsignedRightShift2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: Multiply }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: UnsignedRightShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThan" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: LessThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThan2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: LessThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThanEqual" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: LessThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "lessThanEqual2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: LessThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThan" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: GreaterThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThan2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: GreaterThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThanEqual" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: Plus }), operator: GreaterThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "greaterThanEqual2" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), right: Literal(NumberLiteral(NumberLiteral { value: 2.0 })), operator: GreaterThanEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "inOperator" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(StringLiteral(StringLiteral { value: "property" })), right: Identifier(Identifier { name: "y" }), operator: In })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "instanceofOperator" }), init: Some(BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "x" }), right: Identifier(Identifier { name: "y" }), operator: Instanceof })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "doubleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "x" }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: DoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "doubleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(StringLiteral(StringLiteral { value: "hello" })), right: Literal(BooleanLiteral(BooleanLiteral { value: false })), operator: DoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notDoubleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Identifier(Identifier { name: "x" }), operator: NotDoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notDoubleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: false })), right: Literal(StringLiteral(StringLiteral { value: "hello" })), operator: NotDoubleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "tripleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "x" }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: TripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "tripleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(StringLiteral(StringLiteral { value: "hello" })), right: Literal(BooleanLiteral(BooleanLiteral { value: false })), operator: TripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notTripleEquals" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Identifier(Identifier { name: "x" }), operator: NotTripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "notTripleEquals2" }), init: Some(BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: false })), right: Literal(StringLiteral(StringLiteral { value: "hello" })), operator: NotTripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "bitwise" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 45.0 })), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 23.0 })), operator: BitwiseAnd }), operator: BitwiseXor }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 14.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 7.0 })), operator: Plus }), operator: BitwiseOr })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "logical" }), init: Some(LogicalExpression(LogicalExpression { left: LogicalExpression(LogicalExpression { left: BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: true })), right: Literal(BooleanLiteral(BooleanLiteral { value: false })), operator: TripleEqual }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: GreaterThan }), operator: And }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Or })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "logical2" }), init: Some(LogicalExpression(LogicalExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: true })), right: LogicalExpression(LogicalExpression { left: BinaryExpression(BinaryExpression { left: Literal(BooleanLiteral(BooleanLiteral { value: false })), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: GreaterThan }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: TripleEqual }), operator: And }), operator: Or })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "logical3" }), init: Some(LogicalExpression(LogicalExpression { left: Identifier(Identifier { name: "thing" }), right: Literal(StringLiteral(StringLiteral { value: "fallback" })), operator: NullishCoalescing })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: BinaryExpression(BinaryExpression { left: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), right: Literal(NumberLiteral(NumberLiteral { value: 5.0 })), operator: GreaterThan }), operator: Assign })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: Literal(NumberLiteral(NumberLiteral { value: 3.0 })), operator: Divide }), operator: Multiply })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: Literal(NumberLiteral(NumberLiteral { value: 4.0 })), operator: Multiply }), operator: Plus }), operator: Minus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: Identifier(Identifier { name: "d" }), operator: Remainder }), operator: Remainder })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: Literal(NumberLiteral(NumberLiteral { value: 27.0 })), operator: UnsignedRightShift }), operator: RightShift }), operator: LeftShift })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: Literal(NumberLiteral(NumberLiteral { value: 34.0 })), operator: BitwiseXor }), operator: BitwiseAnd }), operator: BitwiseOr })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "b" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "c" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "d" }), right: AssignmentExpression(AssignmentExpression { left: Identifier(Identifier { name: "e" }), right: Literal(StringLiteral(StringLiteral { value: "hello" })), operator: NullishCoalescing }), operator: LogicalAnd }), operator: LogicalOr }), operator: Exponentiation })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Minus, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Plus, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: LogicalNot, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: BitwiseNot, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Typeof, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Void, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Delete, prefix: true })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: Identifier(Identifier { name: "b" }), right: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "c" }), operator: Minus, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "d" }), operator: BitwiseNot, prefix: true }), operator: Multiply }), operator: Plus }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "e" }), operator: Typeof, prefix: true }), operator: TripleEqual })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: LogicalNot, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "c" }), operator: Plus, prefix: true }), operator: Divide }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "d" }), operator: Minus, prefix: true }), operator: Minus }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "e" }), operator: Void, prefix: true }), operator: GreaterThan })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(LogicalExpression(LogicalExpression { left: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "b" }), operator: Plus, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "c" }), operator: Minus, prefix: true }), operator: GreaterThan }), right: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "d" }), operator: BitwiseNot, prefix: true }), right: UnaryExpression(UnaryExpression { argument: Identifier(Identifier { name: "e" }), operator: LogicalNot, prefix: true }), operator: LessThanEqual }), operator: And })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "b" }), operator: Increment, prefix: true }), right: BinaryExpression(BinaryExpression { left: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "c" }), operator: Decrement, prefix: true }), right: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "d" }), operator: Increment, prefix: true }), operator: Multiply }), operator: Plus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: BinaryExpression(BinaryExpression { left: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "b" }), operator: Decrement, prefix: false }), right: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "c" }), operator: Increment, prefix: false }), operator: Divide }), right: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "d" }), operator: Decrement, prefix: false }), operator: Minus })) }] })), Declaration(VariableDeclaration(VariableDeclaration { kind: Var, declarations: [VariableDeclarator { id: Identifier(Identifier { name: "a" }), init: Some(BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "b" }), operator: Increment, prefix: false }), operator: Typeof, prefix: true }), right: BinaryExpression(BinaryExpression { left: UnaryExpression(UnaryExpression { argument: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "c" }), operator: Decrement, prefix: true }), operator: BitwiseNot, prefix: true }), right: UpdateExpression(UpdateExpression { argument: Identifier(Identifier { name: "d" }), operator: Decrement, prefix: false }), operator: Remainder }), operator: GreaterThanEqual })) }] }))]
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    parser::tests::parse_variable_statement

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 11 filtered out; finished in 0.00s

